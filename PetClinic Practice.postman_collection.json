{
	"info": {
		"_postman_id": "a61a9b06-83ce-4c3d-811b-44e87f082a98",
		"name": "PetClinic Practice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "49409721",
		"_collection_link": "https://pauetisdev-3765426.postman.co/workspace/pauetisdev's-Workspace~1e320310-a0fd-4679-8dbf-2c5dc56c5af1/collection/49409721-a61a9b06-83ce-4c3d-811b-44e87f082a98?action=share&source=collection_link&creator=49409721"
	},
	"item": [
		{
			"name": "Owners",
			"item": [
				{
					"name": "Get All Owners",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// TEST 2: Temps de resposta < 2s\r",
									"pm.test(\"Response time < 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// TEST 3: És un array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									"\r",
									"// TEST 4: Array amb dades\r",
									"pm.test(\"Array has data\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"// TEST 5: Estructura correcta\r",
									"pm.test(\"Owners have correct structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const owner = jsonData[0];\r",
									"    \r",
									"    pm.expect(owner).to.have.property('id');\r",
									"    pm.expect(owner).to.have.property('firstName');\r",
									"    pm.expect(owner).to.have.property('lastName');\r",
									"    pm.expect(owner).to.have.property('city');\r",
									"    pm.expect(owner).to.have.property('telephone');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/owners",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"owners"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// --- Tests (Post-response Script) per a POST Owner (Simplificat) ---\r",
									"\r",
									"// TEST 1: Codi d'estat esperat (201 Created o 200 OK)\r",
									"pm.test(\"Status code is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// TEST 2: Temps de resposta ràpid\r",
									"pm.test(\"Response time < 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// TEST 3: Encadenament i Validació de Contingut (CORREGIT)\r",
									"pm.test(\"Owner created, ID captured, and data verified\", function () {\r",
									"    \r",
									"    if (pm.response.code >= 400) {\r",
									"        return; // Sortim si hi ha un error HTTP (ex: 400 Bad Request)\r",
									"    }\r",
									"\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    //Variables Temporals: Recuperem els valors que havíem enviat\r",
									"    const expectedFirstName = pm.environment.get(\"tempFirstName\");\r",
									"    const expectedLastName = pm.environment.get(\"tempLastName\");\r",
									"    const expectedTelephone = pm.environment.get(\"tempTelephone\");\r",
									"    \r",
									"    // --- Validació d'Estructura i Tipus ---\r",
									"\r",
									"    pm.expect(response, \"Response must be a valid Owner object\").to.be.an('object').and.to.have.property('id');\r",
									"    pm.expect(response.id, \"ID must be a number\").to.be.a('number');\r",
									"\r",
									"    pm.expect(response.firstName, \"FirstName must match sent data\").to.equal(expectedFirstName);\r",
									"    pm.expect(response.lastName, \"LastName must match sent data\").to.equal(expectedLastName);\r",
									"    \r",
									"    //Comprovem que el telèfon retornat té exactament 10 dígits\r",
									"    pm.expect(response.telephone.length, \"Telephone must have 10 digits\").to.equal(10);\r",
									"    \r",
									"    //Encadenament: Desem l'ID per utilitzar-lo en el PUT, DELETE, GET BY ID\r",
									"    pm.environment.set(\"createdOwnerId\", response.id);\r",
									"    console.log(\"Owner creat amb ID per a encadenament:\", response.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Per generar strings random (Nom, Cognom, Ciutat, Adreça)\r",
									"const randomFirstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
									"const randomLastName = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
									"const randomCity = pm.variables.replaceIn(\"{{$randomCity}}\");\r",
									"const randomAddress = pm.variables.replaceIn(\"{{$randomStreetAddress}}\");\r",
									"\r",
									"const minTelephone = 1000000000; \r",
									"const maxTelephone = 9999999999;\r",
									"const randomTelephone = _.random(minTelephone, maxTelephone).toString();\r",
									"\r",
									"// Guardar les dades\r",
									"pm.environment.set(\"tempFirstName\", randomFirstName);\r",
									"pm.environment.set(\"tempLastName\", randomLastName);\r",
									"pm.environment.set(\"tempTelephone\", randomTelephone);\r",
									"pm.environment.set(\"tempCity\", randomCity);\r",
									"pm.environment.set(\"tempAddress\", randomAddress);\r",
									"\r",
									"console.log(`[PRE-REQ] Owner generat: ${randomFirstName} ${randomLastName}. Telèfon: ${randomTelephone}`);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{tempFirstName}}\",\r\n    \"lastName\": \"{{tempLastName}}\",\r\n    \"address\": \"{{tempAddress}}\",\r\n    \"city\": \"{{tempCity}}\",\r\n    \"telephone\": \"{{tempTelephone}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/owners",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"owners"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Onwer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// --- Tests (Post-response Script) per a PUT Owner (Simplificat) ---\r",
									"\r",
									"// TEST 1: Codi d'estat esperat (200 OK o 204 NO CONTENT)\r",
									"pm.test(\"Status code is 200 or 204\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"});\r",
									"\r",
									"// TEST 2: Temps de resposta ràpid\r",
									"pm.test(\"Response time < 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// TEST 3: Verificar actualització (Només si el backend retorna dades)\r",
									"pm.test(\"New LastName updated successfully (if body is returned)\", function () {\r",
									"    // Variable Temporal: Recuperem el valor que havíem enviat des del Pre-request\r",
									"    const expectedLastName = pm.environment.get(\"tempNewLastName\");\r",
									"\r",
									"    // Si el backend respon amb 200 (OK), ha de retornar l'objecte\r",
									"    if (pm.response.code === 200) {\r",
									"        const response = pm.response.json();\r",
									"        \r",
									"        // Comprovem que el cognom retornat coincideix amb el que esperàvem\r",
									"        pm.expect(response.lastName).to.equal(expectedLastName);\r",
									"    }\r",
									"    \r",
									"    // Si el codi és 204 (No Content), la prova passa automàticament sense body per comprovar (server pot ronar 200 o 204, tot ok)\r",
									"    if (pm.response.code === 204) {\r",
									"        pm.expect(true).to.be.true; \r",
									"    }\r",
									"});\r",
									"\r",
									"// TEST 4: Neteja de la variable temporal\r",
									"pm.test(\"Clean up temp variable\", function () {\r",
									"    //Eliminem la variable temporal que només s'ha usat per enviar el Body d'aquest PUT\r",
									"    pm.environment.unset(\"tempNewLastName\");\r",
									"    pm.expect(true).to.be.true; // Assegurem que el test es registra com a PASS\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// --- Pre-request Script per a PUT Owner ---\r",
									"\r",
									"// 1. Generar un nou valor de modificació amb el tag \"MODIFICAT\"\r",
									"const newLastName = pm.variables.replaceIn(\"{{$randomLastName}}\") + \" MODIFICAT\";\r",
									"\r",
									"// 2. Guardar el nou valor en una variable temporal\r",
									"pm.environment.set(\"tempNewLastName\", newLastName);\r",
									"\r",
									"// 3. Recuperar els valors originals dels altres camps des de l'entorn\r",
									"const originalFirstName = pm.environment.get(\"tempFirstName\");\r",
									"const originalAddress = pm.environment.get(\"tempAddress\");\r",
									"const originalCity = pm.environment.get(\"tempCity\");\r",
									"const originalTelephone = pm.environment.get(\"tempTelephone\");\r",
									"\r",
									"// Si algun camp original no existeix, avisar\r",
									"if (!originalFirstName || !originalTelephone) {\r",
									"    console.error(\"ERROR: Dades d'Owner originals no trobades. Revisa la neteja al script POST.\");\r",
									"}\r",
									"\r",
									"console.log(`[PUT PRE-REQ] Nou Cognom a enviar: ${newLastName}`);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{tempFirstName}}\",\r\n    \"lastName\": \"{{tempNewLastName}}\", //Dada a actualitzar\r\n    \"address\": \"{{tempAddress}}\",\r\n    \"city\": \"{{tempCity}}\",\r\n    \"telephone\": \"{{tempTelephone}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/owners/{{createdOwnerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"owners",
								"{{createdOwnerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Owner by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time < 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test(\"Owner ID is 11 (Verification)\", function () {\r",
									"    if (pm.response.code !== 200) {\r",
									"        pm.expect(false, \"Pre-requisite failed: Status code must be 200.\").to.be.true;\r",
									"        return; \r",
									"    }\r",
									"    \r",
									"    const owner = pm.response.json();\r",
									"    const expectedOwnerId = pm.environment.get(\"createdOwnerId\");\r",
									"\r",
									"    pm.expect(parseInt(owner.id)).to.equal(parseInt(expectedOwnerId));\r",
									"});\r",
									"\r",
									"pm.test(\"Owner has all required fields\", function () {\r",
									"    const owner = pm.response.json();\r",
									"    pm.expect(owner).to.have.property('firstName');\r",
									"    pm.expect(owner).to.have.property('lastName');\r",
									"    pm.expect(owner).to.have.property('address');\r",
									"    pm.expect(owner).to.have.property('city');\r",
									"    pm.expect(owner).to.have.property('telephone');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/owners/{{createdOwnerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"owners",
								"{{createdOwnerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post add a new pet to an owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TEST 1: Codi d'estat esperat (201 Created o 200 OK)",
									"pm.test(\"Status code is 201 or 200\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// TEST 2: Encadenament i Validació",
									"pm.test(\"Pet created, ID captured, and data verified\", function () {",
									"    ",
									"    if (pm.response.code >= 400) {",
									"        return; ",
									"    }",
									"",
									"    const response = pm.response.json();",
									"    ",
									"    const expectedName = pm.environment.get(\"tempPetName\");",
									"    const expectedBirthDay = pm.environment.get(\"tempBirthDay\");",
									"    ",
									"    // 1. Validació d'estructura i ID",
									"    pm.expect(response, \"Response must be an object\").to.have.property('id');",
									"    pm.expect(response.id, \"ID must be a number\").to.be.a('number');",
									"    ",
									"    // 2. Validació de contingut: Comprovem que les dades coincideixen",
									"    pm.expect(response.name, \"Pet name must match sent data\").to.equal(expectedName);",
									"    pm.expect(response.birthDate, \"Birth date must match sent data\").to.equal(expectedBirthDay);",
									"    ",
									"    // Encadenament: Desem l'ID de la nova Mascota",
									"    pm.environment.set(\"createdPetId\", response.id);",
									"    console.log(\"Pet creada amb ID per a encadenament:\", response.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// --- Pre-request Script (Corregido) ---",
									"",
									"// Generación de Datos Temporales Únicos",
									"const randomPetName = pm.variables.replaceIn(\"{{$randomFirstName}}\");",
									"const fixedBirthDay = \"2025-01-01\";",
									"",
									"// Dades per al camp 'type'",
									"const petTypeId = 2; // (ID=2 és 'dog' a la BD)",
									"",
									"// Guardar Dades Temporals a l'Entorn",
									"pm.environment.set(\"tempPetName\", randomPetName);",
									"pm.environment.set(\"tempBirthDay\", fixedBirthDay);",
									"pm.environment.set(\"tempPetTypeId\", petTypeId);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{tempPetName}}\",\r\n    \"birthDate\": \"{{tempBirthDay}}\",\r\n    \"type\": {\r\n        \"id\": 2,\r\n        \"name\": \"dog\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/owners/{{createdOwnerId}}/pets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"owners",
								"{{createdOwnerId}}",
								"pets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update pet details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const newPetName = pm.variables.replaceIn(\"{{$randomAdjective}}\") + \" UPDATED\";\r",
									"pm.environment.set(\"tempNewPetName\", newPetName);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TEST 1: Codi d'estat esperat (200 OK o 204 NO CONTENT)\r",
									"pm.test(\"Status code is 200 or 204\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"});\r",
									"\r",
									"// TEST 2: Temps de resposta ràpid\r",
									"pm.test(\"Response time < 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// TEST 3: Verificar que el nom s'ha actualitzat (si el backend retorna body)\r",
									"pm.test(\"New Pet Name updated successfully (from response body)\", function () {\r",
									"    if (pm.response.code !== 200) {\r",
									"        // Si és 204 (No Content), no hi ha body per comprovar.\r",
									"        return; \r",
									"    }\r",
									"    \r",
									"    const response = pm.response.json();\r",
									"    const expectedPetName = pm.environment.get(\"tempNewPetName\")\r",
									"\r",
									"    // Comprovar que el nom tornat coincideix amb el que hem enviat\r",
									"    pm.expect(response.name).to.equal(expectedPetName);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{tempNewPetName}}\",\r\n    \"birthDate\": \"{{tempBirthDay}}\",\r\n    \"type\": {\r\n        \"id\": {{tempPetTypeId}},\r\n        \"name\": \"{{tempPetType}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/owners/{{createdOwnerId}}/pets/{{createdPetId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"owners",
								"{{createdOwnerId}}",
								"pets",
								"{{createdPetId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pet by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time < 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// TEST 3: Verificar que l'objecte Mascota existeix i té ID (CORREGIT)\r",
									"pm.test(\"Response is a valid Pet object with ID\", function () {\r",
									"    // ⚠️ Si el Test 1 falla amb 404, no intentem llegir el JSON\r",
									"    if (pm.response.code !== 200) {\r",
									"        return; \r",
									"    }\r",
									"    \r",
									"    const pet = pm.response.json();\r",
									"    \r",
									"    // 1. Validació d'estructura (Correcció)\r",
									"    // Utilitzem 'to.have.property' només per comprovar que la clau existeix.\r",
									"    pm.expect(pet, \"Response must be an object\").to.be.an('object');\r",
									"\r",
									"    //Comprovem que l'ID existeix\r",
									"    pm.expect(pet, 'The pet object must contain an ID').to.have.property('id');\r",
									"    \r",
									"    //Comprovem que el nom existeix\r",
									"    pm.expect(pet, 'The pet object must contain a name').to.have.property('name');\r",
									"    \r",
									"    // 2. Validació d'Encadenament: Comprovar que l'ID retornat coincideix amb el capturat.\r",
									"    const expectedPetId = pm.environment.get(\"createdPetId\");\r",
									"    \r",
									"    if (expectedPetId) {\r",
									"        // Assegurar que el valor de l'ID retornat sigui igual al que vam capturar (encadenament)\r",
									"        pm.expect(pet.id, \"The returned ID must match the createdPetId\").to.equal(parseInt(expectedPetId));\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/owners/{{createdOwnerId}}/pets/{{createdPetId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"owners",
								"{{createdOwnerId}}",
								"pets",
								"{{createdPetId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Add a vet visit for a pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Utilitzem la data d'avui en format YYYY-MM-DD\r",
									"const today = new Date().toISOString().slice(0, 10); \r",
									"\r",
									"// Generem una descripció de la visita\r",
									"const visitDescription = \"Routine checkup and annual vaccine.\";\r",
									"\r",
									"// 🔑 Guardar Dades Temporals\r",
									"pm.environment.set(\"tempVisitDate\", today);\r",
									"pm.environment.set(\"tempVisitDescription\", visitDescription);\r",
									"\r",
									"console.log(`[PRE-REQ] Visita programada per a: ${today}`);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// --- Tests (Post-response Script) per a POST Visit ---\r",
									"\r",
									"// TEST 1: Codi d'estat esperat (201 Created o 200 OK)\r",
									"pm.test(\"Status code is 201 or 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"// TEST 2: Validació de Contingut i Neteja\r",
									"pm.test(\"Visit validated and temp variables cleaned\", function () {\r",
									"    \r",
									"    if (pm.response.code == 204) {\r",
									"        return; //ignorar\r",
									"    }\r",
									"\r",
									"    const response = pm.response.json();\r",
									"    const expectedDescription = pm.environment.get(\"tempVisitDescription\");\r",
									"\r",
									"    // Validació: Comprovem que la descripció retornada coincideix amb la que hem enviat\r",
									"    pm.expect(response.description, \"Description must match sent data\").to.equal(expectedDescription);\r",
									"    \r",
									"    //Eliminem les variables temporals d'un sol ús\r",
									"    pm.environment.unset(\"tempVisitDescription\");\r",
									"    pm.environment.unset(\"tempVisitDate\");\r",
									"    \r",
									"    console.log(\"Visita creada i variables temporals netejades.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"date\": \"{{tempVisitDate}}\",\r\n    \"description\":\"{{tempVisitDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/owners/{{createdOwnerId}}/pets/{{createdPetId}}/visits",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"owners",
								"{{createdOwnerId}}",
								"pets",
								"{{createdPetId}}",
								"visits"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TEST 1: Codi d'estat esperat 204 NO CONTENT\r",
									"pm.test(\"Status code is 204 (Success)\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// TEST 2: Temps de resposta ràpid\r",
									"pm.test(\"Response time is fast (< 2000ms)\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// TEST 3: Neteja de totes les variables de l'Owner\r",
									"pm.test(\"Clean up ALL Owner environment variables\", function () {\r",
									"\r",
									"    pm.environment.unset(\"createdOwnerId\");\r",
									"\r",
									"    // 2.ELIMINACIÓ DE DADES TEMPORALS: Owner\r",
									"    pm.environment.unset(\"tempFirstName\");\r",
									"    pm.environment.unset(\"tempLastName\");\r",
									"    pm.environment.unset(\"tempAddress\");\r",
									"    pm.environment.unset(\"tempCity\");\r",
									"    pm.environment.unset(\"tempTelephone\");\r",
									"    pm.environment.unset(\"tempNewLastName\"); // Tambe la actualitzada\r",
									"\r",
									"    // 3.ELIMINACIO DE DADES TEMP. DE PET I VISIT\r",
									"    pm.environment.unset(\"tempPetName\");\r",
									"    pm.environment.unset(\"tempBirthDay\"); \r",
									"    pm.environment.unset(\"tempPetType\");\r",
									"    pm.environment.unset(\"tempPetTypeId\");\r",
									"    pm.environment.unset(\"tempVisitDate\");\r",
									"    pm.environment.unset(\"tempVisitDescription\");\r",
									"    pm.environment.unset(\"tempNewPetName\")\r",
									"    console.log(\"Cicle complet Owner-Pet-Visit netejat. Variables d'entorn eliminades.\");\r",
									"    // Com que la funció és només netejar, forcem el PASS\r",
									"    pm.expect(true).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/owners/{{createdOwnerId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"owners",
								"{{createdOwnerId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder contains endpoints to manage owner data and their pets. It includes operations to create, retrieve, update, and delete owner records, as well as to add and manage pets and their visits. These endpoints facilitate comprehensive management of owners and their associated pets within the system."
		},
		{
			"name": "Pets",
			"item": []
		},
		{
			"name": "Vets",
			"item": []
		},
		{
			"name": "Visits",
			"item": []
		}
	]
}